name: Criar Infra e Fazer Deploy do Site

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  # Job 1: Provisionar a Infraestrutura com Terraform
  provision-infra:
    name: 1. Provisionar Infra (Terraform)
    runs-on: ubuntu-latest

    outputs:
      instance_ip: ${{ steps.tf_apply.outputs.public_ip }}

    steps:
      - name: Checkout do c처digo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Mude se sua regi찾o for outra

      - name: Terraform Init
        id: tf_init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply
        id: tf_apply
        run: terraform apply -auto-approve
        working-directory: ./terraform

  # Job 2: Construir e enviar a imagem para o Docker Hub
  build-and-push:
    name: 2. Build e Push da Imagem
    runs-on: ubuntu-latest
    needs: provision-infra

    steps:
      - name: Checkout do c처digo
        uses: actions/checkout@v4

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/valentine-app:latest

  # Job 3: Fazer o deploy do container na inst창ncia criada
  deploy-to-aws:
    name: 3. Deploy do Container na EC2
    runs-on: ubuntu-latest
    needs: [provision-infra, build-and-push]

    steps:
      - name: Conectar na EC2 e fazer o deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ needs.provision-infra.outputs.instance_ip }}
          username: ubuntu
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/valentine-app:latest
            docker stop valentine-site || true
            docker rm valentine-site || true
            docker run -d --name valentine-site -p 80:80 ${{ secrets.DOCKERHUB_USERNAME }}/valentine-app:latest